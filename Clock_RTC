#include <DS1302RTC.h>
#include <TimeLib.h>
#include <EEPROM.h>

// Stepper motor configuration
int port[4] = {5, 4, 3, 2};
int seq[8][4] = {
  {LOW, HIGH, HIGH, LOW},
  {LOW, LOW, HIGH, LOW},
  {LOW, LOW, HIGH, HIGH},
  {LOW, LOW, LOW, HIGH},
  {HIGH, LOW, LOW, HIGH},
  {HIGH, LOW, LOW, LOW},
  {HIGH, HIGH, LOW, LOW},
  {LOW, HIGH, LOW, LOW}
};

// Motor speed settings
const int normalDelay = 98;     // Real-time tick delay
const int fastDelay = 3;        // Fast adjustment delay

// Step memory and config
const long stepsPer12Hours = 30720;  // Based on Hollow Clock 4
const int eepromAddress = 0;         // EEPROM address for last step
long currentStep = 0;

void rotate(long steps, int delayTime) {
  static int phase = 0;
  int delta = (steps > 0) ? 1 : 7;
  steps = abs(steps);

  for (long j = 0; j < steps; j++) {
    phase = (phase + delta) % 8;
    for (int i = 0; i < 4; i++) {
      digitalWrite(port[i], seq[phase][i]);
    }
    delay(delayTime);
  }

  // Turn off motor
  for (int i = 0; i < 4; i++) digitalWrite(port[i], LOW);
}

void storeSteps(long steps) {
  EEPROM.put(eepromAddress, steps);
}

long loadSteps() {
  long stored;
  EEPROM.get(eepromAddress, stored);
  if (stored < 0 || stored >= stepsPer12Hours) return 0;  // Fail-safe
  return stored;
}

// Compute how many steps from 12:00 based on RTC time
long computeStepsFromTime(int hr, int min) {
  hr = hr % 12;
  return (long)((((hr * 60L) + min) / 720.0) * stepsPer12Hours);
}

void setup() {
  for (int i = 0; i < 4; i++) pinMode(port[i], OUTPUT);
  Serial.begin(9600);

  setSyncProvider(RTC.get);
  if (timeStatus() != timeSet) {
    Serial.println("Unable to sync with RTC");
    while (1);  // Stop here if RTC fails
  }

  // Load last known position
  long storedSteps = loadSteps();

  // Get current time
  int hr = hour();
  int mn = minute();

  // Compute how many steps we should be at
  long targetSteps = computeStepsFromTime(hr, mn);

  // Estimate lag (fast rotation time)
  long stepDiff = targetSteps - storedSteps;
  long lagMillis = abs(stepDiff) * fastDelay;
  int lagMinutes = lagMillis / 60000;

  // Adjust for lag: shift target time forward
  mn += lagMinutes;
  if (mn >= 60) { mn -= 60; hr++; }
  if (hr >= 24) hr -= 12;

  targetSteps = computeStepsFromTime(hr, mn);
  stepDiff = targetSteps - storedSteps;

  Serial.print("Adjusting from step "); Serial.print(storedSteps);
  Serial.print(" to "); Serial.println(targetSteps);

  // Rotate fast to correct position
  if (stepDiff != 0) rotate(stepDiff, fastDelay);

  currentStep = targetSteps;
  storeSteps(currentStep);
}

void loop() {
  rotate(1, normalDelay);
  currentStep++;

  if (currentStep >= stepsPer12Hours)
    currentStep = 0;

  // Save every ~minute
  static int tickCount = 0;
  tickCount++;
  if (tickCount >= 65) {
    storeSteps(currentStep);
    tickCount = 0;
  }
}
